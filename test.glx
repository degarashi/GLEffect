/* */
uniform TheBaseUnif {
	lowp float lowVal = 1000;
}
// ただし継承元に同じ名前の変数があったらエラー
uniform TheUnif : TheBaseUnif {
	highp float testVal = [1 2 3 4];
	mat4 testMat;
}

const TheConst {
	mediump float cons = 1234;
}
attribute TheBaseAttr {
	highp vec3 baseval : POSITION;
}
attribute TheAttr : TheBaseAttr {
	highp vec4 testVec : TEXCOORD0;
}
varying TheVary {
	highp vec4 testVar;
}
vertexshader TheVS() {
	vec3 tmp = baseval;
	tmp.z += 2.0;
	vec4 v = vec4(tmp,1);
	gl_Position = v * testMat;
	testVar = testVec;
}
pixelshader ThePS(vec4 val) {
	gl_FragColor = testVar;
}

technique TheBaseTech {
	Attribute = TheAttr;
}

// 継承したTechのPassで記述されたものに関しては関知しない
// +=とすれば継承元に加える
// = とすると置き換え
// 便宜上Techを継承した形。Passが何かを継承は無理
technique TheTech : TheBaseTech {
	CullFace = false;
	LineWidth = 1 2 3 4;
	DepthTest = true;
	DepthRange = 0 1;
	Attribute += TheAttr;
	Varying = TheVary;
	Const = TheConst;
	Uniform = TheUnif, TheBaseUnif;
	Macro {
		Tekito = 256;
		ThisIsKusoge;
	}
	pass P0 {
		VertexShader = TheVS();
		PixelShader = ThePS([1000 1 2 3]);
	}
}
